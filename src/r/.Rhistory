)
Process_Data
data.frame(ts.new)
Process_Data <- data.frame(ts.new)
XmR_Plot <-
ggplot(Process_Data, aes(x = Run_Number, y = Value)) + #init ggplot
geom_point() + geom_line() + #add the points and lines
stat_QC(method = "XmR", #specify QC charting method
auto.label = T, # Use Autolabels
label.digits = 2, #Use two digit in the label
show.1n2.sigma = T  #Show 1 and two sigma lines
) +
stat_QC(method="mR") +
scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
XmR_Plot
Process_Data <-
data.frame(
Process=rep(c("A"), each = 30), #Process A
Run_Number=c(1:30),             #Run Order
Value = c(rnorm(n = 30, mean = 30.5, sd = 1)) #Process A Random Data
)
Process_Data
ts.new
data.frame(ts.new)
a <- data.frame(ts.new)
a
class(a)
a$ts.new
class(a$ts.new)
tb
a <- data.frame(tb)
a
XmR_Plot <-
ggplot(Process_Data, aes(x = Month, y = Imputed_KWH)) + #init ggplot
geom_point() + geom_line() + #add the points and lines
stat_QC(method = "XmR", #specify QC charting method
auto.label = T, # Use Autolabels
label.digits = 2, #Use two digit in the label
show.1n2.sigma = T  #Show 1 and two sigma lines
) +
stat_QC(method="mR") +
scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
XmR_Plot
XmR_Plot <-
+     ggplot(a, aes(x = Month, y = Imputed_KWH)) + #init ggplot
+     geom_point() + geom_line() + #add the points and lines
+     stat_QC(method = "XmR", #specify QC charting method
+             auto.label = T, # Use Autolabels
+             label.digits = 2, #Use two digit in the label
+             show.1n2.sigma = T  #Show 1 and two sigma lines
+     ) +
+     stat_QC(method="mR") +
+     scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
XmR_Plot <-
ggplot(Process_Data, aes(x = Month, y = Imputed_KWH)) + #init ggplot
geom_point() + geom_line() + #add the points and lines
stat_QC(method = "XmR", #specify QC charting method
auto.label = T, # Use Autolabels
label.digits = 2, #Use two digit in the label
show.1n2.sigma = T  #Show 1 and two sigma lines
) +
stat_QC(method="mR") +
scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
Process_Data <- a
Process_Data <- tb
XmR_Plot <-
ggplot(Process_Data, aes(x = Month, y = Imputed_KWH)) + #init ggplot
geom_point() + geom_line() + #add the points and lines
stat_QC(method = "XmR", #specify QC charting method
auto.label = T, # Use Autolabels
label.digits = 2, #Use two digit in the label
show.1n2.sigma = T  #Show 1 and two sigma lines
) +
stat_QC(method="mR") +
scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
XmR_Plot
Processed_Data
tb
XmR_Plot <-
ggplot(Process_Data, aes(x = Month, y = Imputed_KWH)) + #init ggplot
geom_point() + geom_line() + #add the points and lines
stat_QC(method = "XmR", #specify QC charting method
auto.label = T, # Use Autolabels
label.digits = 2, #Use two digit in the label
show.1n2.sigma = T  #Show 1 and two sigma lines
) +
stat_QC(method="mR") +
scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
XmR_Plot
XmR_Plot <-
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + #init ggplot
geom_point() + geom_line() + #add the points and lines
stat_QC(method = "XmR", #specify QC charting method
auto.label = T, # Use Autolabels
label.digits = 2, #Use two digit in the label
show.1n2.sigma = T  #Show 1 and two sigma lines
) +
stat_QC(method="mR") +
scale_x_continuous(expand =  expand_scale(mult = .15))  # Pad the x-axis
XmR_Plot
ggplot(tb, aes(x = Month, y = Imputed_KWH))
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line()
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() + stat_QC(method = "XmR", #specify QC charting method
+             auto.label = T, # Use Autolabels
+             label.digits = 2, #Use two digit in the label
+             show.1n2.sigma = T  #Show 1 and two sigma lines
+     )
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
+ stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR")
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR") + scale_x_continuous(expand =  expand_scale(mult = .15))
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR") + scale_x_continuous(expand =  expand_scale(mult = .15))
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR")
QC_Violations <-
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + #init ggplot
stat_qc_violations(method = "XmR"
#show.facets = 4 #if you just want facet 4
)
QC_Violations
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE) %>%
anomalize(remainder, method = 'iqr', alpha = 0.05) %>%
time_recompose()
ts_anomalized$remainder
data.frame(value = ts_anomalized$remainder)
tb
ts_anomalized
ggplot(ts_anomalized, aes(x = Month, y = Remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR")
ts_anomalized
ts_anomalized$remainder
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR")
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) + stat_QC(method = "mR")
QC_Violations <-
ggplot(ts_anomalized, aes(x = Month, y = remanider)) + #init ggplot
stat_qc_violations(method = "XmR"
#show.facets = 4 #if you just want facet 4
)
QC_Violations
QC_Violations <-
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + #init ggplot
stat_qc_violations(method = "XmR"
#show.facets = 4 #if you just want facet 4
)
QC_Violations
QC_Violations$data
QC_Violations$labels
QC_Violations$layers
QC_Violations <-
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + #init ggplot
stat_qc_violations(method = "XmR"
show.facets = 4 #if you just want facet 4
)
QC_Violations
QC_Violations <-
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + #init ggplot
stat_qc_violations(method = "XmR",
show.facets = 4 #if you just want facet 4
)
QC_Violations
QC_Violations$coordinates
QC_Violations$scales
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE)
ts_anomalized
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR")
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) + stat_QC(method="mR")
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) + stat_QC(method="mR")
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "Twitter", merge = TRUE)
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T)
mR_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) +
stat_mR() +
stat_QC_labels(method="mR")
mR_Plot
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_mR() +
stat_QC_labels(method="mR")
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = T) +
stat_QC(method="mR")
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F) +
stat_mR() +
stat_QC_labels(method="mR")
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE)
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
ggplot(ts_anomalized, aes(x = Month, y = remainder)) +
stat_mR() +
stat_QC_labels(method="mR")
x_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) +
stat_mR() +
stat_QC_labels(method="mR")
x_Plot, mR_Plot
x_Plot
x_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) +
stat_mR() +
stat_QC_labels(method="mR")
grid.arrange(x_Plot, mR_Plot, nrow=2)
require(gridExtra)
x_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) +
stat_mR() +
stat_QC_labels(method="mR")
grid.arrange(x_Plot, mR_Plot, nrow=2)
QC_Violations <-
ggplot(ts_anomalized, aes(x = Month, y = remainder)) + #init ggplot
stat_qc_violations(method = "XmR",
show.facets = 4 #if you just want facet 4
)
QC_Violations
ddply(ts_anomalized, .fun = function(df)
{QC_Lines(data = df$remainder, method = "XmR")}
)
library(plyr)
ddply(ts_anomalized, .fun = function(df)
{QC_Lines(data = df$remainder, method = "XmR")}
)
?ddply
QC_Lines(df$remainder, method =
"XmR")
QC_Lines(ts_anomalized$remainder, method = "XmR")
grid.arrange(x_Plot, mR_Plot, nrow=2)
x_Plot <- ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(tb, aes(x = Month, y = Imputed_KWH)) + stat_mR() + stat_QC_labels(method="mR")
grid.arrange(x_Plot, mR_Plot, nrow=2
)
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE)
x_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + stat_mR() + stat_QC_labels(method="mR")
grid.arrange(x_Plot, mR_Plot, nrow=2)
QC_Lines(data = ts_anomalized$remainder, method = "XmR")
account = '165.0 - BLD 03_90327795'
tb =  select(filter(tb_all, Building_Meter == account), 'Month', 'Imputed_KWH')
# plot the two charts in one page
require(gridExtra)
# XmR on residual part
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE)
x_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(ts_anomalized, aes(x = Month, y = remainder)) + stat_mR() + stat_QC_labels(method="mR")
grid.arrange(x_Plot, mR_Plot, nrow=2)
# summarize the control limits
QC_Lines(data = ts_anomalized$remainder, method = "XmR")
account = '1.0 - BLD 01_7836716'
tb =  select(filter(tb_all, Building_Meter == account), 'Month', 'Imputed_KWH')
plot(tb$Imputed_KWH)
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line()
# XmR on residual part
ts_anomalized <- tb %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE)
# Forecast package, tsclean for imputation & outlier detection
tb <- tb[order(tb$Month), ]
ts.new <- ts(tb$Imputed_KWH, start = c(year(min(tb$Month)), month(min(tb$Month))),, frequency = 12)
ts.clean <- tsclean(ts.new)
plot(ts.new)
ts.plot(ts.new, ts.clean, gpars = list(col = c("red", "blue")))
ts.diff <- ts.clean - ts.new
ts.diff[ts.diff != 0]
autoplot(uschange[,c("Consumption","Income")]) +
ylab("% change") + xlab("Year")
ts.plot(ts.new, ts.clean, gpars = list(col = c("red", "blue")))
# Forecast package, tsclean for imputation & outlier detection
tb <- tb[order(tb$Month), ]
ts.orig <- ts(tb$Imputed_KWH, start = c(year(min(tb$Month)), month(min(tb$Month))),, frequency = 12)
ts.clean <- tsclean(ts.new)
plot(ts.orig)
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
ts.diff <- ts.clean - ts.new
ts.diff[ts.diff != 0]
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
ts.orig
data.frame(ts.orig)
df = data.frame(month = as.Date(as.yearmon(time(ts.orig))), value = as.matrix(ts.orig))
df
ts_to_df <- function(ts) {
data.frame(month = as.Date(as.yearmon(time(ts))), value = as.matrix(ts))
}
ts_to_df(ts.orig)
plot(ts.orig)
df.orig <- ts_to_df(ts.orig)
df.clean <- ts_to_df(ts.clean)
head(df.orig)
grid.arrange(
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
, ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
, nrow=2)
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
account = '2.0 - BLD 20_6477762'
tb =  select(filter(tb_all, Building_Meter == account), 'Month', 'Imputed_KWH')
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line()
account = '164.0 - BLD 01_96973681'
tb =  select(filter(tb_all, Building_Meter == account), 'Month', 'Imputed_KWH')
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line()
# Forecast package, tsclean for imputation & outlier detection
tb <- tb[order(tb$Month), ]
ts.orig <- ts(tb$Imputed_KWH, start = c(year(min(tb$Month)), month(min(tb$Month))),, frequency = 12)
ts.clean <- tsclean(ts.new)
plot(ts.orig)
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
# Forecast package, tsclean for imputation & outlier detection
tb <- tb[order(tb$Month), ]
ts.orig <- ts(tb$Imputed_KWH, start = c(year(min(tb$Month)), month(min(tb$Month))),, frequency = 12)
ts.clean <- tsclean(ts.new)
plot(ts.orig)
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
# Forecast package, tsclean for imputation & outlier detection
tb <- tb[order(tb$Month), ]
ts.orig <- ts(tb$Imputed_KWH, start = c(year(min(tb$Month)), month(min(tb$Month))),, frequency = 12)
ts.clean <- tsclean(ts.orig)
plot(ts.orig)
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
ts.diff <- ts.clean - ts.orig
ts.diff[ts.diff != 0]
df.orig <- ts_to_df(ts.orig)
df.clean <- ts_to_df(ts.clean)
grid.arrange(
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
, ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
, nrow=2)
# XmR on residual part
ts_anomalized <- df.clean %>%
time_decompose(Imputed_KWH, method = "STL", merge = TRUE)
tibble(df.clean)
tb <- tibble(df.clean)
tb
set_names(tb) <- c('month', 'value')
tb <- tibble(df.clean)
set_names(tb) <- c('month', 'value')
tb
summary(accounts$na_perc)
accounts[accounts$na_counts == 0, ]
dim(accounts[accounts$na_counts == 0, ])
dim(accounts)
filter(accounts, na_perc > 0.1)
head(accounts[accounts$na_counts == 0, ])
account = '101.0 - BLD 04_7421675'
tb =  select(filter(tb_all, Building_Meter == account), 'Month', 'Imputed_KWH')
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line()
# Forecast package, tsclean for imputation & outlier detection
tb <- tb[order(tb$Month), ]
ts.orig <- ts(tb$Imputed_KWH, start = c(year(min(tb$Month)), month(min(tb$Month))),, frequency = 12)
ts.clean <- tsclean(ts.orig)
ts.clean <- tsclean(ts.orig)
ts.plot(ts.orig, ts.clean, gpars = list(col = c("red", "blue")))
ts.diff <- ts.clean - ts.orig
df.orig <- ts_to_df(ts.orig)
df.clean <- ts_to_df(ts.clean)
grid.arrange(
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
, ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
)
# define a function to convert ts to dataframe
ts_to_df <- function(ts) {
data.frame(month = as.Date(as.yearmon(time(ts))), value = as.matrix(ts))
}
df.orig <- ts_to_df(ts.orig)
df.clean <- ts_to_df(ts.clean)
grid.arrange(
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
, ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
)
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
+ ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
head(df.orig)
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_line(data = df.clean, aes(x = month, y = value), color = "blue") +
xlab('month') +
ylab('KWH Consumptions')
grid.arrange(
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
, ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
)
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_line(data = df.clean, aes(x = month, y = value), color = "blue") +
xlab('month') +
ylab('KWH Consumptions')
ts.diff[ts.diff != 0]
cbind(df.orig, df.clean)
df <- cbind(df.orig, df.clean)
col(df)
colnames(df)
head(df)
df <- cbind(df.orig, df.clean[, 2])
head(df)
colnames(df) <- c('month', 'value.orig', 'value.forecasted')
head(df)
mutate(df, value.diff = value.forecasted - value.orig)
df <- mutate(df, value.diff = value.forecasted - value.orig)
head(df)
filter(df, value.diff != 0)
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_line(data = df.clean, aes(x = month, y = value), color = "blue") +
xlab('Month') +
ylab('KWH Consumptions')
df
head(df)
class(df)
class(tb)
as.tibble(df)
as_tibble(df)
tb <- as_tibble(df)
# XmR on residual part
ts_anomalized <- tb %>%
time_decompose(value.forecasted, method = "STL", merge = TRUE)
x_Plot <- ggplot(ts_anomalized, aes(x = month, y = remainder)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
mR_Plot <- ggplot(ts_anomalized, aes(x = month, y = remainder)) + stat_mR() + stat_QC_labels(method="mR")
grid.arrange(x_Plot, mR_Plot, nrow=2)
# summarize the control limits
QC_Lines(data = ts_anomalized$remainder, method = "XmR")
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_point(data = df.orig, aes(x = month, y = value), color = "black")
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_point(data = df.orig, aes(x = month, y = value), color = "black") +
geom_line(data = df.clean, aes(x = month, y = value), color = "blue") +
xlab('Month') +
ylab('KWH Consumptions')
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_point(data = df.orig, aes(x = month, y = value), color = "black") +
geom_line(data = df.clean, aes(x = month, y = value), color = "blue") +
geom_point(data = df.clean, aes(x = month, y = value), color = "black") +
xlab('Month') +
ylab('KWH Consumptions')
ggplot() +
geom_line(data = df.orig, aes(x = month, y = value), color = "red") +
geom_point(data = df.orig, aes(x = month, y = value), color = "red") +
geom_line(data = df.clean, aes(x = month, y = value), color = "blue") +
geom_point(data = df.clean, aes(x = month, y = value), color = "blue") +
xlab('Month') +
ylab('KWH Consumptions')
grid.arrange(x_Plot, mR_Plot, nrow=2)
grid.arrange(
ggplot(df.orig, aes(x = month, y = value)) + geom_point() + geom_line()
, ggplot(df.clean, aes(x = month, y = value)) + geom_point() + geom_line()
)
filter(accounts, na_perc > 0.1)
account = '1.0 - BLD 01_7836716'
tb =  select(filter(tb_all, Building_Meter == account), 'Month', 'Imputed_KWH')
ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line()
x_Plot <- ggplot(tb, aes(x = Month, y = KWH_Imputed)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
x_Plot
tb
x_Plot <- ggplot(tb, aes(x = Month, y = Imputed_KWH)) + geom_point() + geom_line() +
stat_QC(method = 'XmR', auto.label = T, label.digits = 2, show.1n2.sigma = F)
x_Plot
mR_Plot <- ggplot(tb, aes(x = Month, y = Imputed_KWH)) + stat_mR() + stat_QC_labels(method="mR")
mR_Plot
require(graphics)
plot(stl(nottem, "per"))
plot(stl(nottem, s.window = 7, t.window = 50, t.jump = 1))
plot(stl(nottem, "per"))
plot(stl(nottem, s.window = 7, t.window = 50, t.jump = 1))
class(nottem)
stl(ts.clean
)
plot(stl(ts.clean, "per"))
plot(stl(ts.clean, s.window = 12, t.window = 50, t.jump = 1))
plot(stl(ts.clean, "per"))
plot(stl(ts.clean, s.window = 12, t.window = 50, t.jump = 1))
