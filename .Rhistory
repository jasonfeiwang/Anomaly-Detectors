ls()
en
env
install.packages("Rcmdr")
gaussian?
()
pi
pnorm(0, mean = pi, sd = 2)
pnorm(e, mean = pi, sd = 2)
mu = pi
sd = 2
pnorm(0, mu, sd)
pnorm(mu + 2*sd, mu, sd)
pnorm(mu + 2*sd, mu, sd) - pnorm(mu - 2*sd, mu, sd)
pnorm(mu + sd, mu, sd) - pnorm(mu - sd, mu, sd)
1 - pnorm(2.5 - pi/2, 0, 1)
2 - pnorm(pi + 3 * 2, pi, 2)
2 - pnorm(pi + 3 * 2, pi, 2)*2
install.packages('rmarkdown')
install.packages("tinytex")
tinytex::install_tinytex()  # install TinyTeX
ls
ls()
install.packages("ctex")
version
install.packages("xcolor")
install.packages("showtext")
install.packages("ggplot2")
version
install.packages('rmarkdown')
install.packages("tinytex")
tinytex::install_tinytex()  # install TinyTeX
tinytex::tinytex_root()
sudo tmlgr install xcolor
sudo tlmgr install xcolor
sudo tlmgr install xcolor
install.packages("rticles")
install.packages("xcolor")
install.packages("ms")
install.packages("texlive-extras")
install.packages("tinytex")
install.packages('rmarkdown')
install.packages("rmarkdown")
tinytex::install_tinytex()
tinytex::tinytex_root()
install.packages("xcolor")
install.packages("texlive-extras")
tinytex::install_tinytex()
tinytex::tinytex_root()
remove.packages("tinytex")
remove.packages("TinyTex")
install.packages("TinyTex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex(force = TRUE)
tinytex::tinytex_root()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("rticles")
library(tinytex)
tlmgr_search('/everysel.sty')
tlmgr_install('ms')
tlmgr path
knit_with_parameters('~/Desktop/Study/learning/r_Markdown/chinese_doc.Rmd')
unlink('Desktop/Study/learning/r_Markdown/chinese_doc_cache', recursive = TRUE)
tinytex::version
tinytex?
;
?tinytex
??tinytex
sessionInfo()
session_info(c('rmarkdown', 'tinytex'))
devtools::session_info(c('rmarkdown', 'tinytex'))
install.packages("devtools")
devtools::session_info(c('rmarkdown', 'tinytex'))
devtools::install_github("yihui/tinytex")
devtools::session_info(c('rmarkdown', 'tinytex'))
?tinytex::tlmgr_search
tinytex::tlmgr_search('ctexbook.cls')
tinytex::tlmgr_install('ctex')
tinytex::tlmgr_install('ms')
session_info()
sessionInfo()
devtools::session_info(c('rmarkdown', 'tinytex'))
2^32
2^31
install.packages("VIM")
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::findAndReplaceAddin()
devtools::install_github("rstudio/nvim-R", type = "source")
devtools::install_github("rstudio/nvim-r", type = "source")
devtools::install_github("rstudio/Nvim-R", type = "source")
getwd()
install.packages("resumer")
devtools::install_github("jacekpardyak/resume")
getwd()
library(resumer)
data(jobs)
head(jobs)
# generate a list of lists of jobs that list the company name, job name and bullet namejobList <- list(
jobList <- list(
list("Pied Piper", "Tech Startup", c(1, 3)),
list("Goliath National Bank", "Large Bank", 1:2),
list("Goliath National Bank", "Bank Intern", 1:3),
list("Surveyors Inc", "Survery Stats", 1:2),
list("Daily Planet", "Reporting", 2:4),
list("Hudson University", "Professor", c(1, 3:4)),
list("Hooli", "Coding Intern", c(1:3))
)
# generate a list of lists of research that list the company name, job name and bullet
researchList <- list(
list("Hudson University", "Oddie Research", 4:5),
list("Daily Planet", "Winning Article", 2)
)
cat(generateSection(jobs, jobList))
#cat('\\clearpage')
cat(generateSection(jobs, researchList, sectionName='Research Experience', type='Research'))
tlmgr install resume
library(tinytex)
tlmgr_search('resume.sty')
tlmgr_install('resume')
tlmgr_update()
tlmgr_search('texpos.sty')
tlmgr_install('texpos')
tlmgr_install('texpos')
tlmgr option repository ctan
tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet
tlmgr_search('framed.sty')
tlmgr_install('framed')
tlmgr_search('textpos.sty')
tlmgr_install('textpos')
tlmgr_search('isodate.sty')
tlmgr_install('isodate')
tlmgr_search('substr.sty')
tlmgr_install('substr')
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/feiwang/Desktop/xyz.png")
knitr::include_graphics("/Users/feiwang/Desktop/yxz.png")
knitr::include_graphics("/Users/feiwang/Desktop/yxz.png")
install.packages("fpp")
library(fpp)
data(ausbeer)
timeserie_beer = tail(head(ausbeer, 17*4+2),17*4-4)
ausbeer
timeserie_beer
dim(timeserie_beer)
timeserie_beer
timeserie_beer.shpae
timeserie_beer.shape
ausbeer
dim(ausbeer)
len(ausbeer)
length(ausbeer)
length(timeserie_beer)
plot(as.ts(timeserie_beer))
install.packages("Ecdat")
library(Ecdat)
data(AirPassengers)
timeserie_air = AirPassengers
plot(as.ts(timeserie_air))
install.packages("forecast")
library(forecast)
trend_beer = ma(timeserie_beer, order = 4, centre = T)
plot(as.ts(timeserie_beer))
install.packages("forecast")
library(forecast)
trend_beer = ma(timeserie_beer, order = 4, centre = T)
plot(as.ts(timeserie_beer))
> plot(as.ts(timeserie_beer))
plot(as.ts(timeserie_beer))
lines(trend_beer)
plot(as.ts(trend_beer))
plot(as.ts(timeserie_beer))
lines(trend_beer)
plot(as.ts(trend_beer))
detrend_beer = timeserie_beer - trend_beer
plot(as.ts(detrend_beer))
par(mar = c(4, 4, .1, .1), las = 1)
plot(cars, pch = 19)
abline(fit, col = 'red')
install.packages(c("backports", "callr", "class", "codetools", "foreign", "haven", "httpuv", "httr", "jsonlite", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "mgcv", "openssl", "pillar", "processx", "ps", "quantreg", "rcmdcheck", "RcppEigen", "readr", "readxl", "rio", "rmarkdown", "sessioninfo", "survival"))
View(jobs)
packrat:status()
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
library(forecast)
reverse_ts <- function(y)
{
ts(rev(y), start=tsp(y)[1L], frequency=frequency(y))
}
# Function to reverse a forecast
reverse_forecast <- function(object)
{
h <- length(object[["mean"]])
f <- frequency(object[["mean"]])
object[["x"]] <- reverse_ts(object[["x"]])
object[["mean"]] <- ts(rev(object[["mean"]]),
end=tsp(object[["x"]])[1L]-1/f, frequency=f)
object[["lower"]] <- object[["lower"]][h:1L,]
object[["upper"]] <- object[["upper"]][h:1L,]
return(object)
}
euretail
attach(forecast)
?stlf
?ets
gold
gold2 <- na.interp(gold)
autoplot(gold2, series="Interpolated") +
autolayer(gold, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="gray"))
?scale_colour_manual
library(ggplot2)
gold2 <- na.interp(gold)
autoplot(gold2, series="Interpolated") +
autolayer(gold, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="gray"))
max(gold)
max(gold, rm.na = TRUE)
gold
class(gold)
tsoutliers(gold)
gold
length(gold)
sum(is.na(gold))
length(is.na(gold))
a = gold %>%
tsclean()
a
plot(a)
plot(gold)
plot(a)gold %>%
tsclean() %>%
ets() %>%
forecast(h=50) %>%
autoplot()
gold %>%
tsclean() %>%
ets() %>%
forecast(h=50) %>%
autoplot()
gold %>%
tsclean() %>%
stlf() %>%
forecast(h=50) %>%
autoplot()
y <- ts(c(123,39,78,52,110), start=2012)
y
plot(y)
melsyd[,"Economy.Class"]
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
data(melsyd)
library(fpp)
data(melsyd)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
melsyd[,"Economy.Class"]
class(melsyd[,"Economy.Class"])
class(melsyd)
melsyd
max(melsyd[,"Economy.Class"])
min(melsyd[,"Economy.Class"])
sum(is.na(melsyd[,"Economy.Class"]))
length(melsyd[,"Economy.Class"])
sum(melsyd[,"Economy.Class"]==0)
sum(melsyd[,"Economy.Class"]==0, rm.na = TRUE)
is.na(melsyd[,"Economy.Class"])
melsyd[, ~is.na(melsyd[,"Economy.Class"])]
melsyd[is.na(melsyd[,"Economy.Class"]), ]
melsyd[~is.na(melsyd[,"Economy.Class"]), ]
melsyd[!is.na(melsyd[,"Economy.Class"]), ]
melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"]
autoplot(melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"])
melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"]
class(melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"])
melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"]
melsyd[!is.na(melsyd[,"Economy.Class"]), ]$
Economy.Class
melsyd[!is.na(melsyd[,"Economy.Class"]), ]$Economy.Class
melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"]
autoplot(melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"])
plot(melsyd[!is.na(melsyd[,"Economy.Class"]), "Economy.Class"])
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
getwd()
setwd("/Users/feiwang/Desktop/capstone/anomalyDetectors/output/NYCHA_TS.csv")
setwd("/Users/feiwang/Desktop/capstone/anomalyDetectors")
tb = read_csv("./output/NYCHA_TS.csv")
library(tidyverse)
tb = read_csv("./output/NYCHA_TS.csv")
tb
ts = ts(tb$Imputed_KWH)
ts
ts = ts(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'$Imputed_KWH)
;
ts = ts(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'$Imputed_KWH))
ts = ts(filter(tb, Building_Meter == '165.0 - BLD 03_90327795')$Imputed_KWH)
ts
autoplot(ts)
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
a10
class(a10)
ts
a10
a10[1]
a10[2]
a10[4]
ts[1]
ts[4]
tb
select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Building_Meter', 'Month', 'Imputed_KWH')
select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH')
ts(select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH'))
autoplot(ts(select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH')))
set.seed(12)
dummy.df <- as.data.frame(matrix(round(rnorm(1200),digits=2),nrow=100,ncol=12))
rownames(dummy.df) <- seq(from=1901, to=2000)
colnames(dummy.df) <- c("jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec")
dummy.df
dummy.df.ts <- ts(as.vector(as.matrix(dummy.df)), start=c(1901,1), end=c(2000,12), frequency=12)
dummy.df
class(dummy.df)
set.seed(12)
dummy.df <- as.data.frame(matrix(round(rnorm(1200), digits = 2),
nrow = 100, ncol = 12))
dummy.df
rownames(dummy.df) <- seq(1901, 2000)
dummy.df
month.abb
rownames(dummy.df) <- seq(1901, 2000)
head(dummy.df)
colnames(dummy.df) <- month.abb
head(dummy.df)
dummy.df.ts <- ts(as.vector(t(as.matrix(dummy.df))),
start=c(1901,1), end=c(2000,12), frequency=12)
dummy.df.ts
class(dummy.df.ts)
autoplot(dummy.df.ts)
tb
ts
ts =  select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Building_Meter', 'Month', 'Imputed_KWH')
ts
library(tibbletime)
as_tbl_time(select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH'), index = month)
select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH')
as_tbl_time(select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH'), index = Month)
a <- as_tbl_time(select(filter(tb, Building_Meter == '165.0 - BLD 03_90327795'), 'Month', 'Imputed_KWH'), index = Month)
autoplot(a)
ts(a)
autoplot(a)
autoplot(ts(a))
plot(a)
plot(a) + geom_line()
library(tidyquant)
library(timetk)
library(sweep)
